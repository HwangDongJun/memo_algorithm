merge sort / quick sort => 분할정복법 사용

분할 : 해결하고자 하는 문제를 작은 크기의 ★동일한★ 문제들로 분할
정복 : 각각의 작은 문제를 순환적으로 해결(Recursion사용)
합병 : 작은 문제의 해를 합하여(merge) 원래 문제에 대한 해를 구함

분할의 예 => 최대값을 찾기 위해 전체를 2개로 나눠서 각각 최대값을 찾는 것이 동일한 문제들로 분할을 하는 것이다.
A L G O R I T H M S 가 주어진다면 이걸 A L G O R  |  I T H M S 로 분할한다.
그리고 각각 순환적으로 정복을 하고, 합병을 진행한다.
계속해서 반으로 나누다 보면 가장 최소의 길이가 생기게 되고, 둘씩 합병해 나가면서 전체 정렬을 진행한다.
(Merge_Sort.PNG참고)

여기서 정렬이 완료된 두개의 list를 합치는 과정은?
i는 1개의 list에서 가장 작은값, j는 1개의 list에서 가장 작은값을 가리키고, 새로운 추가 배열을 이용하여 값을 넣는다.
i와 j가 가리키는 값을 비교해서 더 작은 값을 k가 가리키는 새로운 list에 넣고, i를 다음 칸으로 전진, k도 전진
또 비교를 하면서 i, j, k를 전진시킨다.

mergeSort(A[], p, r) { //A[p...r]을 의미한다.
    if(p < r) then {
        q <- (p+q)/2; //중간지점계산
        mergeSort(A, p, q); //전반부 정렬
        mergeSort(A, q+1, r); //후반부 정렬
        merge(A, p, q, r); //합병
    }
}

merge(A[], p, q, r) {
    //정렬되어 있는 두 배열 A[p...q]와 A[q+1...r]을 합하여
    //정렬된 하나의 배열 A[p...r]을 만든다.
}

--------------코드-------------
void merge(int data[], int p, int q, int r) {
    int i = p, j = q+1, k = p;
    int tmp[data.length()];
    while(i <= q && j <= r) { //어느 한쪽의 data를 모두 가져올 때까지
        if(data[i] <= data[j])
            tmp[k++] = data[i++];
        else
            tmp[k++] = data[j++];
    }
    while(i <= q)
        tmp[k++] = data[i++];
    while(j <= r)
        tmp[k++] = data[j++];
    //이미 끝난 list를 제외하고 남아있는 list의 원소는 정렬이 된 상태이기에 그대로 옮겨온다.
    for(int i = p; i <= r; i++)
        data[i] = tmp[i];
}

*시간복잡도 -> mergesort시간복잡도.PNG 참고

n/2인 이유 -> 전체 n개에서 2개로 나눠가면서 진행을 한다. 자세히 본다면 업실링하고, 다운실링이 있는데, 2개로 나눠서 진행을 하기에 방향이 반대
마지막에 + n 인 이유 -> data의 총 개수는 n개이며, 한번 합병 비교할때마다 data가 이동을 하므로, 합병을 할때 걸리는 시간이 n이다.
결론적으로 O(n * log n) 이다.