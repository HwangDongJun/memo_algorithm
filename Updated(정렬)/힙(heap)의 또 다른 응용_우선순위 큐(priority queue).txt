- 최대 우선순위 큐(maximum priority queue)는 다음의 두 가지 연산을 지원하는 자료구조
1. INSERT(x) : 새로운 원소 x를 삽입
2. EXTRACT_MAX(): 최대값을 삭제하고 반환
- 최소 우선순위 큐(minimum priority queue)는 EXTRACT-MAX대신 EXTRACT-MIN을 지원하는 자료구조
* MAX HEAP을 이용하여 최대 우선순위 큐를 구현하겠다.

-INSERT-
max heap으로 된 배열에 새로운 데이터를 추가하기 위한 과정
1. 배열의 가장 뒷 부분에 새로운 데이터를 추가한다.
2. 부모노드와 비교하여 크기가 크다면 위치를 변경한다.
3. 이 과정을 root까지 올라가거나 부모보다 작을때까지 반복한다.

MAX-HEAP-INSERT(A, key) {
    heap_size = heap_size+1; //새로운 data가 들어가야 하기에 1 추가
    A[heap_size] = key;
    i = heap_size;
    while(i > i and A[PARENT(i)] < A[i]) { //값을 비교해서 변경해주는 과정
        exchange A[i] and A[PARENT(i)];
        i = PARENT(i);
    }
}
-> 시간 복잡도 O(log_2 n)이다. 비교를 할때마다 한 노드를 올라가므로 O(h)에 비례한다. 여기서 h는 2개중에 한개 이므로 h = log_2 n이다.

-EXTRACT_MAX-
root노드를 삭제하면서 반환을 진행한다. 이때 가장 마지막의 위치의 data를 root노드로 가져온다.
자식들중 큰 값과 root노드를 비교해서 크다면 변경하게 된다. 이 과정을 반복한다.

-> 시간 복잡도 O(log_2 n)이다.