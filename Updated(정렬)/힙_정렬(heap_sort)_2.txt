정렬을 위해서 가장 먼저 heap을 만들어야 한다. -> 정렬할 배열을 만든다.
배열에 정렬되지 않는 값이 들어갔다고 가정하자.
1. leaf가 아닌 최초의 node를 거꾸로 찾아가면서 찾는다. 해당하는 tree를 heap을 만들기 위한 과정을 거친다.
    - 자식들중 큰 값을 비교해서 크면 변경, 크지 않으면 변경하지 않는다.
2. leaf가 아닌 최초 다음 node를 가지고 같은 과정을 진행한다.
(heap을 만드는 과정은 자식들을 비교해서 큰 값과 변경은 자식이 없을때까지이거나 자신보다 큰 값이 없을 경우까지 진행한다.)

MAX-HEAPIFY를 한 번 진행하는데 필요한 시간이 log_n이다. 그리고 전체적으로 n/2번 돌게 된다.
n에 해당하는 부모노드는 n/2이므로, n/2번 돌게 되는 것이다.
그러므로 n/2 * log_n이다. -> O(n*log_n)이다. (실제적으로 직접적인 계산은 아니다. 전체적으로 n이라고 가정)
전체적인 tree를 가지고 계산을 했을때, 전체적인 노드가 n이므로 해당하는 값이 나온다.
실제적인 계산은 O(n)이다.

* leaf가 아닌 최초의 node를 찾는 방법! 배열의 마지막 노드의 n/2를 진행한다.(내림사용) 그러면 최초의 부모노드가 나오게 된다.

★Heap sort (heap을 만들고 나면 배열의 값이 sort되는 것은 아니다. 이제 sort과정)
1. 이전의 과정을 거쳐 주어진 데이터로 힙을 만든다.
2. root노드를 맨 마지막 노드와 자리를 바꾼다. (root노드는 가장 최대값인 것은 변함이 없기 때문이다.)
3. 힙의 코그가 1 줄어든 것으로 간주(맨 마지막 값은 변경을 했기 때문에)
   즉, 가장 마지막 값은 힙의 일부가 아닌 것으로 간주한다.
4. root노드에 대해서 HEAPIFY(1)한다. -> Heap sort위의 과정에 해당한다.
5. 2~4번 과정을 반복한다.

시간복잡도 -> MAX-HEAP을 만들어주는 과정이 위해서 실제적인 값으로 O(n)이다.
-> MAX-HEAPFIY를 반복하므로 O(log_2 n)이다.
따라서 Total time : O(n * log_2 n)이다.