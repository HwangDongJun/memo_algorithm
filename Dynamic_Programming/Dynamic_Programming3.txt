동적계획법
1. 일반적으로 최적화문제(optimisation problem) 혹은 카운팅(counting)문제에 적용됨
2. 주어진 문제에 대한 순환식(recurrence equation)을 정의한다.
3. 순환식으로 memoization 혹은 bottom-up 방식으로 푼다.

- subproblem들을 풀어서 원래 문제를 푸는 방식, 그런 의미에서 분할정복법과 공통성이 있음
이전 예제에서 L(i, j)를 L(i-1, j) 와 L(i, j-1)로 나누는, 좀 더 작은 문제(subproblem)로 나누는 것이다.

- 분할정복법에서는 분할된 문제들이 서로 disjoint하지만 동적계획법에서는 그렇지 않음
동적계획법같은 경우 행렬에서 경로를 계산할때, 이전의 값을 계산해야한다. 그때 겹치는 부분이 발생한다.
그러므로 서로 독립적인 disjoint가 아니다.

- 즉 서로 overlapping하는(disjoint하지 않는) subproblem들을 해결함으로써 원래 문제를 해결

ex) quicksort에서 pivot라는 한 지점을 기준으로 분할된 두 subproblem은 서로 disjoint하다.
(disjoint는 분할된 두 subproblem은 서로 독립적이기에 전혀 연과성이 없다.)

★동적계획법에서 어떤 문제를 해결하기 위한 순환식을 세우는 것이 쉽지는 않다.
순환식은 optimal substructure를 표현한다.

질문 : "최적해의 일부분이 그 부분에 대한 최적해인가?" 답 : Yes

만약 s -> u까지의 최단경로에서 중간(v지점)인 s -> v도 최단경로인가? 답 : Yes
최단 경로 문제는 다양한 경로가 존재한다면, 중간 지점 + 중간지점 ~ 끝지점 의 길이가 min(최단)인지를 확인하는 식으로 순환식을 작성한다.

*최장경로 문제
[노드를 중복 방문하지 않고 가는 가장 긴 경로]
[optimal substructure를 가지는가?]

가장 처음 던져볼 질문 : 이 문제에 대한 최적해의 일부분이 항상 최장경로인가?
이 질문에 대한 답은 항상 Yes는 아니다.
정확한 최장경로를 묻는 것이 아니라. 최적해의 일부분에 대한 최장경로이다. 이 부분에 관해서는 당연히 예외가 있을 수 있다.
(최단경로인 경우는 성립한다. -> 알아둘것.)
그렇다면 중간 지점 + 중간지점 ~ 끝지점 의 길이가 max(최장)인지를 확인하는 식으로 순환식을 세울수는 없다.

..다른 방식으로 세울수있다는 거지 optimal substructure로 성립하지 않아서 동적계획법으로 해결하지 못한다고는 이야기할 수 없다.

